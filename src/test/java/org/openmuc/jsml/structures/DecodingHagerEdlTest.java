/*
 * Copyright 2009-14 Fraunhofer ISE
 *
 * This file is part of jSML.
 * For more information visit http://www.openmuc.org
 *
 * jSML is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * jSML is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with jSML.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
package org.openmuc.jsml.structures;

import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;

import org.junit.Assert;
import org.junit.Test;

public class DecodingHagerEdlTest {

	public static byte[] hexStringToByteArray(String s) {
		int len = s.length();
		byte[] data = new byte[len / 2];
		for (int i = 0; i < len; i += 2) {
			data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4) + Character.digit(s.charAt(i + 1), 16));
		}
		return data;
	}

	@Test
	public void decodeTimeTagMessage() throws IOException {

		byte[] message = hexStringToByteArray

		DataInputStream is = new DataInputStream(new ByteArrayInputStream(message));

		SML_Message smlMessage = new SML_Message();
		Assert.assertTrue(smlMessage.decodeAndCheck(is));

		smlMessage = new SML_Message();
		Assert.assertTrue(smlMessage.decodeAndCheck(is));

		SML_GetListRes getListRes = (SML_GetListRes) smlMessage.getMessageBody().getChoice();
		for (SML_ListEntry listEntry : getListRes.getValList().getValListEntry()) {
			if (listEntry.getValTime().isSelected()) {
				if (listEntry.getValTime().getTag().getVal() == 3) {
					// System.out.println("timestamp: "
					// + ((SML_TimestampLocal)
					// (listEntry.getValTime().getChoice())).getTimestamp().getVal());
				}
			}
		}

		SML_Message smlMessage3 = new SML_Message();
		Assert.assertTrue(smlMessage3.decodeAndCheck(is));
		// System.out.println(Integer.toHexString(smlMessage3.getMessageBody().getTag().getVal()));

	}

}
